version: '3'
services:
 db:
  image: mysql:8.0.40
  container_name: concert_hall_db
  restart: always
  volumes:
   - data:/var/lib/mysql
  environment:
   MYSQL_ROOT_PASSWORD: ${DATABASE_ROOT_PASSWORD}
   MYSQL_DATABASE: ${DATABASE_NAME}
   MYSQL_USER: ${DATABASE_USER}
   MYSQL_PASSWORD: ${DATABASE_USER_PASSWORD}
   MYSQL_TCP_PORT: ${DATABASE_PORT}
  ports:
   - '3306:${DATABASE_PORT}'
  healthcheck:
   test:
    [
     'CMD',
     'mysql',
     '-h',
     'localhost',
     '-u',
     'root',
     '-p${DATABASE_ROOT_PASSWORD}',
     '-e',
     'SELECT 1',
    ]
   timeout: 20s
   retries: 10

 backend:
  build:
   context: .
   dockerfile: Dockerfile
  container_name: concert_hall_backend
  command: sh -c "export ENV=${ENVIRONMENT} && python3 manage.py makemigrations && python3 manage.py migrate --noinput && python manage.py init_periodic_tasks && python3 manage.py collectstatic --noinput && python manage.py runserver 0.0.0.0:8000"
  restart: always
  volumes:
   - .:/app
  ports:
   - '8000:8000'
  networks:
   - default
  depends_on:
   - db

 rabbitmq:
  image: rabbitmq:3-management
  container_name: concert_hall_rabbitmq
  restart: always
  ports:
   - '5672:5672' # RabbitMQ broker port
   - '15672:15672' # Management UI port for RabbitMQ
  environment:
   RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
   RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}

 celery:
  build:
   context: .
   dockerfile: Dockerfile
  container_name: concert_hall_celery
  command: sh -c "export ENV=${ENVIRONMENT} && celery -A config worker --loglevel=info"
  environment:
   CELERY_BROKER_URL: ${CELERY_BROKER_URL}
  depends_on:
   - backend
   - rabbitmq
  volumes:
   - .:/app

 celery_beat:
  build:
   context: .
   dockerfile: Dockerfile
  container_name: concert_hall_celery_beat
  command: sh -c "export ENV=${ENVIRONMENT} && celery -A config beat --loglevel=info"
  environment:
   CELERY_BROKER_URL: ${CELERY_BROKER_URL}
  depends_on:
   - backend
   - rabbitmq
  volumes:
   - .:/app

 sonarqube:
  image: sonarqube:lts-community
  depends_on:
   - sonar_db
  environment:
   SONAR_JDBC_URL: jdbc:postgresql://sonar_db:5432/sonar
   SONAR_JDBC_USERNAME: sonar
   SONAR_JDBC_PASSWORD: sonar
  ports:
   - '9001:9000'
  volumes:
   - sonarqube_conf:/opt/sonarqube/conf
   - sonarqube_data:/opt/sonarqube/data
   - sonarqube_extensions:/opt/sonarqube/extensions
   - sonarqube_logs:/opt/sonarqube/logs
   - sonarqube_temp:/opt/sonarqube/temp

 sonar_db:
  image: postgres:13
  environment:
   POSTGRES_USER: sonar
   POSTGRES_PASSWORD: sonar
   POSTGRES_DB: sonar
  volumes:
   - sonar_db:/var/lib/postgresql
   - sonar_db_data:/var/lib/postgresql/data

 prometheus:
  image: prom/prometheus:v2.14.0
  volumes:
   - ./prometheus.yml:/etc/prometheus/prometheus.yml
   - prometheus-data:/prometheus
  ports:
   - "9090:9090"
  networks:
   - default

 grafana:
  image: grafana/grafana:6.5.2
  ports:
    - "3000:3000"
  volumes:
    - grafana-storage:/var/lib/grafana

volumes:
 data:
 sonarqube_conf:
 sonarqube_data:
 sonarqube_extensions:
 sonarqube_logs:
 sonarqube_temp:
 sonar_db:
 sonar_db_data:
 prometheus-data: 
 grafana-storage:
